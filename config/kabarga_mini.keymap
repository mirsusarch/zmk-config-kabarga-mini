/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/*
* &lt { quick_tap_ms = <220>; };
* &mt { quick_tap_ms = <220>; };
 */

&lt {
    quick_tap_ms = <220>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    tapping-term-ms = <280>;
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
    delay-ms = <0>;
};

/ {
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        x {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
        };

        q {
            bindings = <&kp SQT>;
            key-positions = <18 19>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <29 28>;
        };

        togglemouse {
            bindings = <&tog 4>;
            key-positions = <7 6 8>;
        };

        tast_macro {
            bindings = <&test_selecting_line_left>;
            key-positions = <15 16>;
        };

        macro_right {
            bindings = <&test_selecting_line_right>;
            key-positions = <17 18>;
        };

        langu {
            bindings = <&alt_shift>;
            key-positions = <3 4>;
        };
    };

    macros {
        worck_flow: worck_flow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp Y &kp LS(A) &kp N4 &kp V &kp LS(Z) &kp LS(Y) &kp X>;
            label = "WORCK_FLOW";
        };

        test_selecting_line_left: test_selecting_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>;
            label = "TEST_SELECTING_LINE";
        };

        test_selecting_line_right: test_selecting_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>;
            label = "TEST_SELECTING_LINE_RIGHT";
        };

        alt_shift: alt_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT)>;
            label = "ALT_SHIFT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layeer {
            bindings = <
&kp Q  &kp W       &kp E           &kp R        &kp T             &kp Y              &kp U        &kp I            &kp O         &kp P
&kp A  &kp S       &mt LEFT_ALT D  &mt LCTRL F  &mt LEFT_SHIFT G  &mt RIGHT_SHIFT H  &mt RCTRL J  &mt RIGHT_ALT K  &kp L         &kp SEMI
&kp Z  &mt LWIN X  &kp C           &kp V        &kp B             &kp N              &kp M        &kp COMMA        &mt RWIN DOT  &kp FSLH
                   &kp TAB         &lt 1 SPACE  &kp ENTER                            &lt 3 ESC    &lt 2 BACKSPACE  &kp ENTER
            >;
        };

        lower_layer {
            bindings = <
&kp UNDERSCORE         &kp TILDE    &kp F3    &kp F4      &kp PLUS     &kp MINUS  &kp EQUAL  &kp GRAVE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&mt LCTRL EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPS   &kp STAR   &kp LPAR          &mt RCTRL RPAR
&mt LSHIFT N1          &mt LWIN N2  &kp N3    &kp N4      &kp N5       &kp N6     &kp N7     &kp N8     &mt RWIN N9       &mt RSHFT N0
                                    &trans    &trans      &lt 3 TAB               &trans     &trans     &trans
            >;
        };

        raise_layer {
            bindings = <
&none     &none  &kp END  &none      &none     &none     &none           &kp LS(LA(N5))  &none            &kp UP
&kp HOME  &none  &kp DEL  &kp RIGHT  &none     &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &none
&none     &none  &none    &none      &kp LEFT  &kp DOWN  &kp HOME        &none           &none            &studio_unlock
                 &trans   &trans     &none               &none           &trans          &trans
            >;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR    &none         &none         &none         &worck_flow   &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &none   &bt BT_CLR
&none         &none         &none         &none         &none         &none         &none         &none         &none   &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none         &none         &none         &none   &ext_power EP_OFF
                            &trans        &none         &trans                      &trans        &none         &trans
            >;
        };

        mouse {
            bindings = <
&none           &mkp MB1         &msc SCRL_DOWN  &mkp MB2        &none  &none  &mkp MB1         &mmv MOVE_UP    &mkp MB2         &msc SCRL_DOWN
&kp LCTRL       &msc SCRL_RIGHT  &msc SCRL_UP    &msc SCRL_LEFT  &none  &none  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP
&kp LEFT_SHIFT  &kp X            &kp C           &kp V           &none  &none  &msc SCRL_RIGHT  &mkp MB3        &msc SCRL_LEFT   &mkp MB3
                                 &none           &none           &none         &mkp MB1         &lt 2 SPACE     &mkp MB2
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };
    };
};
